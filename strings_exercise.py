# -*- coding: utf-8 -*-
"""strings_exercise.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dmPAUAzKpkOnk6a-dAjGpemq1CoFWSHL

Q.1 Write a program that asks the user to enter a string. The program should then print the
following:
(a) The total number of characters in the string
(b) The string repeated 10 times
(c) The first character of the string (remember that string indices start at 0)
(d) The first three characters of the string
(e) The last three characters of the string
(f) The string backwards
(g) The seventh character of the string if the string is long enough and a message otherwise
(h) The string with its first and last characters removed
(i) The string in all caps
(j) The string with every a replaced with an e
"""

username = input("Enter username: ")

#print the length of the string
print(f"total number of characters: " , len(username) )

#print the string 10 times
for i in range(10) :
  print(username)

#print 1st character of string
print(f"first character of string : " , username[0])

#print last character of string
print(f"last character of string : " , username[-1])

#print first 3 characters of string
print(f"first 3 characters of string : " , username[0:3])

#the string backward
print(f"the string backward : " , username[::-1])

#the 7th character
if len(username)>=7 :
  print(f"the 7th character of string : " , username[6] )
else:
  print("the 7th character of string doesn't exist")

#The string with its first and last characters removed
print(f"The string with its first and last characters removed : " , username[1:-1])

#(i) The string in all caps
print(f"The string in lower case: " , username.lower())
print(f"The string in upper case: " , username.upper())

#The string with every a replaced with an e
print(f"The string with every a replaced with an e : " , username.replace("a","e"))

"""Q.2 At a certain school, student email addresses end with @student.college.edu , while pro-fessor email addresses end with @prof.college.edu . Write program that first asks the user how many email addresses they will be entering, and then has the user enter those ad-dresses. After all the email addresses are entered, the program should print out a message indicating either that all the addresses are student addresses or that there were some profes-sor addresses entered."""

count = input("how many mail address you will entering : ")

for i in range (int(count)):
  email = input("enter your mails: ")
  if "@student.college.edu" in email:
    print("f{email} is student mail")
  else:
    print(f"{email} is professor mail")

"""Q.3 ask user to enter a word then check whether the string is a palindrome or not(True/False). (A palindrome is a string that reads the same forwards and backwards.)
for example deleveled is palindrome word

"""

word = input("enter a word: ")
if word == word[::-1]:
  print(True)
else:
  print(False)

"""Q.4 extract the current lat,lng from the received nmea packet from the gps
"$GPGGA,172814.0,3137.36664,N, 00212.21149,E,2,6,1.2,18.893,M,-25.669,M,2.0,0031*4F"
the format for NMEA coordinates is (d)ddmm.mmmm write a code to convert it to decimal degrees
Lat : 31 37.36664,N becomes 31 degrees and 37.26664 seconds = 31 + 37.36664/60 = 31.6227773
Lon : 002 12.21149,E becomes 2 degrees and 12.21149 seconds = 2 + 12.21149/60 = 2.20352483
note if the lat direction S(south) you have to multiply the lat by -1 and the same with lon if it's dirction W(West) you have to multiply the lon by -1


"""

def covert_to_to_decimal_degrees(coordinates , direction):
  degrees = int(coordinates[:2]) if len(coordinates) >=9 else (coordinates[:3])
  minutes = float(coordinates[2:]) if len(coordinates) >=9 else (coordinates[3:])

  decimal_degrees = degrees + minutes/60

  if direction=="S" or direction=="W":
    decimal_degrees *=-1
  return decimal_degrees



gps = "$GPGGA,172814.0,3137.36664,N, 00212.21149,E,2,6,1.2,18.893,M,-25.669,M,2.0,0031*4F"
gps= gps.split(",")

#defintions
lat = gps[2]
lat_dir = gps[3]
lon = gps[4]
lon_dir = gps[5]

lat_to_dec = covert_to_to_decimal_degrees(lat,lat_dir)
lon_to_dec = covert_to_to_decimal_degrees(lon,lon_dir)

print(f"longtude :{lon_to_dec} \n latitude: {lat_to_dec}")

"""Q.5 A simple way of encrypting a message is to rearrange its characters. One way to rearrange the characters is to pick out the characters at even indices, put them first in the encrypted string,
and follow them by the odd characters. For example, the string message would be encrypted
as msaeesg because the even characters are m, s, a, e (at indices 0, 2, 4, and 6) and the odd characters are e, s, g (at indices 1, 3, and 5).
(a) Write a program that asks the user for a string and uses this method to encrypt the string.
(b) Write a program that decrypts a string that was encrypted with this method.
"""

def message_encrypt(message):
  even = message[::2]
  odd =message[1::2]
  encrypted_message = even + odd
  return encrypted_message

def message_decrypt(message_encrypt):
  mid = (len(message_encrypt)+1)//2
  even = message_encrypt[:mid]
  odd = message_encrypt[mid:]
  decrypted_message = ''.join(e+o for e , o in zip(even,odd)) + even[-1] * (len(even) > len(odd))
  return decrypted_message

message = input("please enter a message to encrypt: ")
encrypted_message = message_encrypt(message)
decrypted_message = message_decrypt(encrypted_message)
print(f"encrypted message : {encrypted_message} \ndecrypted message:{decrypted_message}")

