# -*- coding: utf-8 -*-
"""lists.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UYhPfDhah7nDpRJM1QlbTQsQ3ibfm6tD

## lists
Lists are just like dynamic sized arrays, declared in other languages (vector in C++ and ArrayList in Java). Lists need not be homogeneous always which makes it a most powerful tool in Python. A single list may contain DataTypes like Integers, Strings, as well as Objects. Lists are mutable, and hence, they can be altered even after their creation.

#### create a list
"""

x = []    # create empty list
y = [5, 8, 3.14, -90 , "hello"]
z = [5, 8, 3.14, -90 , "hello", [5, 9, [-30]]]

print(z[-1][-1][3])

# you can access any ele using it's index
print(z[3])  # this will print the ele at index 3 -90
print(z[4])
print(z[5])
print(z[5][1])
print(z[5][2][0])
print(z[4][1])

# the negative indexing also works with lists
print(z[-1])
print(z[-1][2][0])
print(z[-1][-1][-1])

z = [5, 8, 3.14, -90 , "hello", [5, 9, [-30]]]
print(len(z[4]))

"""#### Lists are mutable"""

s = "hello world"
s[2] = "m"   # strings are imutable you can't modify their values

s = "hello world"
s = s[:2] +"m"+s[3:]
print(s)

x= [1,2,5]
x[1] = -90 # listis are mutable you can modify their values
print(x)

"""#### Python offers the following list functions:
<ul>
<li>len(list): It gives the total length of the list.</li>
<li>max(list): It returns an item from the list with max value.</li>
<li>min(list): It returns an item from the list with min value.</li>
<li>sum(list): It returns the sum of list values </li>    
</ul>

"""

l1 = [ "ab" , "az" ]
print(len(l1))
print(max(l1))
print(min(l1))
print(sum(l1))

help(max)

"""#### iterate over the list"""

l1 = [1,5, -90 , "hello"]
# method 1
for ele in l1: # ele is any variable name like x you can rename it whatever you want
    print(ele)
print("*"*20)
# method 2 (using index)
for i in range(len(l1)):
    print(f"the ele stored at index {i} is {l1[i]}")

l1 = [
    [1,5],[1,90], [20,-13] , [15,12]]
# method 1
summ = 0
for sub_list in l1: # ele is any variable name like x you can rename it whatever you want
    for ele in sub_list:
        summ += ele
print(summ)

"hello"

l1 = [[1,5],[1,90], [20,-13] , [15,12]]
# method 1
summ = 0
for i in range(len(l1)): # ele is any variable name like x you can rename it whatever you want
    sub_list = l1[i]
    for ele in sub_list:
        summ += ele
print(summ)

"""#### list sliceing
it has the same rules of string slicing
<br>
l[start:end:(step--> optional default 1)]
"""

x = [7 , 2 , 3 , 5 , 6]
print("list :" ,"  ".join([str(ele) for ele in x]))
print("index:" ,"  ".join([str(i) for i in range(len(x))]))

print(x[1:4])
print(x[1:])
print(x[:4])
print(x[:])
print(x[::-1])

python -m pip install geopy --user

"""Q.we are developing app like uber and we got a request in the server-side who is waiting in the Ramses Railway the mobile app sent his location(lat , lon) and our target is to connect the rider with the nearest driver. we have a list of drivers for each driver we know his (lat,lon, car name). develop an algorithm to choose the nearest car for a certain location from a list of cars.
Note: to get distance between two points
Notes:
import geopy.distance
location1 = [30.063249588012695 , 31.24689292907715]
location2 = [30.068357467651367 , 31.344741821289062]
distance= geopy.distance.vincenty(location1, location2).km # the distance in km
print(distance) # this should print 9.451816024957292
"""

import geopy.distance
location1 = [30.063249588012695 , 31.24689292907715]
location2 = [30.00708770751953  , 31.408044815063477]
distance= geopy.distance.geodesic(location1, location2).km # the distance in km
print(distance) # this should print 9.451816024957292

import geopy.distance
rider_location = [30.063249588012695 , 31.24689292907715] # (lat , lon) Ramses Railway Station
surrounding_drivers  = [
    [30.068357467651367 , 31.344741821289062 , "car2"],   # City Center, Makram Ebaid 3
    [30.04442596435547  , 31.235675811767578 , "car1"],   # Tahrir Square
    [30.0284366607666   , 31.408044815063477 , "car3"],   # Cairo Festival City Mall
    [30.00708770751953  , 31.408044815063477 , "car4"]   # Mall of Arabia, 6th of October City,
]
target_car = ""
min_distance = 66666666666666666666666
# put your code here
for car_info in surrounding_drivers:
    driver_location = car_info[0:2]
    driver_name = car_info[-1]
    distance = geopy.distance.vincenty(driver_location, rider_location).km
    if distance < min_distance:
        min_distance = distance
        target_car = driver_name
print(target_car , min_distance)

l1 = [5 , 18 , -3 , 10 , 8]

help(list)

"""#### list methods
<ul>
<li>l.append(ele) append object to end of the list</li>
<li>l.clear() remove all items from L</li>
<li>l.count(value) return number of occurrences of value in l</li>
<li>l.index(value) return first index of value</li>
<li>l.insert(index, object) insert object before index</li>  
<li>l.pop([index])  remove and return item at index (default last)</li>  
<li>l.remove(value)  remove first occurrence of value.</li>  
<li>l.reverse() reverse *IN PLACE*</li>
<li>l.sort() stable sort *IN PLACE*</li>
<li>l.copy() returns a list a shallow copy of L</li>
<li>l.extend(list) extend list by appending elements from the iterable</li>
</ul>
"""

l = [1, 2, 3, 4]
l.append(-20) # append it doesn't return anything be careful
print(l)
l.clear()
print(l)

l = ["hey" , "cat" , "hello" , "hey"]
print(l.count("hey")) # counts return integer
print(l.index("hey"))

print(l.index("not existed")) # if the ele is not existed the app will through an error

if "not existed" in l:
    print(l.index("not existed"))
else:
    print("the item is not existed in the list")

l = ["hey" , "cat" , "hello" , "hey"]
print("hey" in l)
print("heyy" in l)
print("Hey" in l)

l = ["hey" , "cat" , "hello" , "hey"]
l.insert(2 , "anything") # insert anything at index 0
print(l)

l = []
l.insert(100 , "anything") # insert anything at index 0
print(l)

l = ["hey" , "cat" , "hello" , "hey1"]
poped_ele =l.pop() # pop by default removes the last ele in the list and return it
print(poped_ele)
print(l)

l = ["hey" , "cat" , "hello" , "hey"]
poped_ele =l.pop(1) # pop the ele at index 1
print(poped_ele)
print(l)

l = ["hey" , "cat" , "hello" , "hey"]
l.remove("hey") # it will removes the first word hey in the list
print(l)

# what if we want to remove every hey word
l = ["hey" , "cat" , "hello" , "hey"]
for i in range(l.count("hey")):
    l.remove("hey")
print(l)

l = ["hey" , "cat" , "hello" , "hey1"]
l.reverse()
print(l)

x = [5 , 8,2,1,9]
x.sort()
print(x)
x.reverse()
print(x)

x = [1,5,-90]
y = [20,13]
x.append(y)
print(x)

x = [1,5,-90]
y = [20,13]
# what if we want to append each ele from the list y to list x
# you can't say x.append(y) because the result would be [1,5,-90, [20,13]]
# method 1
for ele in y:
    x.append(ele)
print(x)
#method 2
x = [1,5,-90]
y = [20,13]
x.extend(y)
print(x)

x = [1 , -90]
y = x
y[0] = -50
print(x)
print(y)

# take a copy from a list
# note try to visualize this code execution http://www.pythontutor.com/visualize.html#mode=edit
x = [1 , -90]
y = x
y[0] = -50
print(x)
print(y)

x = [1 , -90]
y = x.copy()
y[0] = -50
print(x)
print(y)

x = [1 , -90]
y = x[:]  # sometime they called [:] copy operator
y[0] = -50
print(x)
print(y)

x = [[30 , "car1"] , [13 , "car2"]]
x.sort()
print(x)

"""#### list comprehension
<img src="assets/images/Python-List-Comprehension-Syntax.png">
"""

x = [0 for i in range(10)]
print(x)

L = [x**2 for x in range(5)]
print(L)

x = [10 for i in range(3)]
print(x)

# Conditionals in List Comprehension
number_list = [ x for x in range(20) if x % 2 == 0]
print(number_list)

# if...else With List Comprehension
obj = ["Even" if i%2==0 else "Odd" for i in range(10)]
print(obj)

obj = []
for i in range(10):
    obj.append("Even" if  i%2==0 else "Odd")
print(obj)

obj = []
for i in range(10):
    if  i%2==0 :
        obj.append("Even")
    else:
        obj.append("Odd")
print(obj)

