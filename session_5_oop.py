# -*- coding: utf-8 -*-
"""Session 5 OOP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yj948bNwG14iY0mP-c9X_POn3jKM28id
"""

s = str(input("Enter the string : "))
d = {}

for i in s:
    # i have chart in s , i = s[index]
    if i in d:
        # check if i "the chart" in the dictionary or not
        # if yes add 1 to the value
        d[i] += 1
    else:
        # if not creat element with value = 1
        d[i] = 1
d

s = str(input("Enter the string : "))
def char(s):
    if len(s) > 3:
        print( s[0:2]+s[-2:(])
    else:
        print(" the length of the string must be bigger than 3")
char(s))

"""## Object Oriented Programming"""

# create class:

# instance method
class Dog:
    counter = 0
    def __init__ (self, name, age) :
        self.dname = name
        self.dage = age
        Dog.counter +=1

    def show (self):
        print ("dog name is ", self.dname, ", age is : ",self.dage )

# class method:
    @classmethod
    def num_ofdogs(cls):
        print("The number of Dogs is :", cls.counter)

d1 = Dog("Leo", 2)
d2 = Dog("shado", 3)
d3 = Dog("bebo", 1)

Dog.num_ofdogs()

d1.show()
d2.show()

class student:
    counter = 0
    def __init__ (self, name, age, st_id, courses_num) :
        self.stname = name
        self.stage = age
        self.stid = st_id
        self.numcourses = courses_num
        student.counter +=1

    def discribtion (self):
        print ("name : ", self.stname,
               "\nage is : ",self.stage,
               "\nID : ", self.stid ,
               "\nthe number of the courses :",self.numcourses )
    @classmethod
    def num_ofst(cls):
        print("The number of students is :", cls.counter)

st1 = student("Nour", 22 , 619083, 10)
st1.discribtion()

st2 = student("mohamed", 20 , 506070, 20)
st3 = student("fawzy", 20 , 90100, 20)
st4 = student("ahmed", 20 , 304030, 0)
student.num_ofst()

class Cars :
    def __init__ (self, name, color, speed):
        #Encapsulation
        #we use __ after the name to cover or secure the data to no one can access
        self.__cname = name
        self.__ccolor = color
        self.__cspeed = speed
    def show(self):
        print(f"the car name is: {self.__cname},Color : {self.__ccolor}, and speed is: {self.__cspeed} km\h")

#static method
    @staticmethod
    def time (speed, distance):
        print (f"the time for speed {speed} and distance: {distance} is :{distance / speed}")

BMW = Cars("BMW", "Red", 250)
BMW.show()

BMW.time(250 , 1000)

BMW.speed = 10

BMW.show()

class Animal:
    def __init__(self , name , age):
        self.name = name
        self.age = age
    def eat(self , food):
        print('%s is eating %s.  %s' %(self.name , food , self.age))

# Inheritance:
class Dog(Animal):
    def fetch(self , thing):
        print('%s goes after the %s!' %(self.name , thing))

class Cat(Animal):
    def swatstring(self):
        print('%s shreds the string!' %(self.name))

# A = Animal('Animal')
d = Dog('Ranger' , 23)
c = Cat('MeOw' , 23)

d.fetch('ball')
c.swatstring()
d.eat('Dog')
c.eat('Cat Food')
# d.swatstring()

